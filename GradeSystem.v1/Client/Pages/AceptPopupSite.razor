@inject IBookTypeService BookTypeService
@inject IBookServiceSupport BookServiceSupport
@inject IBookService BookService
@inject IFileService FileService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Headers;
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            @if (AllDataIn)
            {
                <strong class="me-auto">Do You Whant To Save New BookType </strong>
            }
            else
            {
                <strong class="me-auto">You Can't Save This BookType</strong>
            }
        </div>
        @if (AllDataIn)
        {
            <div class="toast-body">
                Title @Title <br>
                Author @Author <br>
                Editon @Edition <br>
                <label for="Img">Img</label>
                <InputFile OnChange="@HandleSelected" multiple />
                @if (ImgUrl != null)
                {
                    <div>
                        <img src="@ImgUrl" style="width:300px" />
                    </div>
                }
                <br>
                Amount <input type="number" min="0" value="0" @oninput=amoutchange></input> @Amount<br>
                @message <br>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Save">Save</button>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close">Cancel</button>
            </div>
        }
        else
        {
            <div class="toast-body">
                Title,Author and Edtion must be filed.<br>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close">Cancel</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    public bool AllDataIn = true;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Author { get; set; }

    [Parameter]
    public string? Edition { get; set; }

    Book book = new Book();    

    BookType booktype =new BookType();
    int Amount = 0;
    string message = string.Empty;
    public string ImgUrl { get; set; }
    public EventCallback<string> OnChange { get; set; }

    public async void ShowBookType( string title , string author , string edition)
    {
        if (title.Length != 0 & author.Length != 0 & edition.Length != 0)
        {
            Title = title;
            Author = author;
            Edition = edition;
        }
        else
        {
            AllDataIn = false;
        }
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {       
        IsVisible = false;
        AllDataIn = true;
        Amount = 0;
        StateHasChanged();
    }
    async Task amoutchange(ChangeEventArgs args)
    {
        string temp = args.Value.ToString();
        try
        {
            Amount = Int32.Parse(temp);
        }
        catch (FormatException e)
        {
            Console.WriteLine(e.Message);
            Amount = 0;
        }
        if(Amount<0)
        {
            Amount = 0;
        }
    }
    async Task Save()
    {
        booktype.Author = Author;
        booktype.Edition = Edition;
        booktype.Title = Title;     
        booktype.Description = null;
        booktype.Cover = booktype.Title + booktype.Author + booktype.Edition + ".jpg";
        booktype.AmountOfBooks = 0;
        await BookTypeService.CreateBookType(booktype);
        book.IsBorowed =false;
        book.IsBoocked = false;
        book.StudentId = null;
        book.ReturnDate = null;
        book.ReservationDate = null;
        book.BorowingDate = null;
        book.QRCode = 1; //tu bedzie generacja QR
        book.Student = null;
        await BookTypeService.LastAddedBookType();
        booktype = BookTypeService.LastBookTypeAdded;
        book.BookType = booktype;
        book.BookTypeID = booktype.BookTypeID;
        for (int tem = 0; tem < Amount; tem++)
        {
            Book booktemp = new Book();
            int idtemp = 0;

            await BookService.CreateBook(book);
            await BookService.GetLastBookAdded();
            booktemp = BookService.LastBookAdded;
            idtemp = booktemp.BookID;
            (booktype.BookIds).Add(idtemp);
            (booktype.Books).Add(booktemp);
            booktype.AmountOfBooks = booktype.AmountOfBooks + 1;
            await BookTypeService.UpdateBookType(booktype);
            booktemp.QRCode = booktemp.BookID; //te 2 linnie wywalimy jak bedzie tworzenie qrkodow 
            await BookService.UpdateBook(booktemp); // 2


        }
        Amount = 0;      
        IsVisible = false;
        AllDataIn = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/test");
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        string fname = Title + Author + Edition + ".jpg";
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);

                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", fname);
                    ImgUrl = await FileService.UploadProductImage(content);
                    await OnChange.InvokeAsync(ImgUrl);
                }
            }
        }
    }
}