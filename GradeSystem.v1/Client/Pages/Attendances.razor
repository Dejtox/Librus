@page "/attendances"
@inject NavigationManager NavigationMenager
@inject IParentService ParentService
@inject IStudentService StudentService
@inject IAttendanceService AttendanceService
@inject IEnrollmentService EnrollmentService
<table class="pagetable">
    <thead>
        <tr>
            <th class="firstrow1">
<h1>Attendances</h1>
<table class="TimeSelectionTable">
    <thead>
        <tr>
            <td> </td>
            <td> </td>
        </tr>
    </thead>
    <tbody>
        <tr>
        <td><label for="Enrollment-time">Since</label></td>
        <td>
<div>

    
    <input type="datetime-local" id="meeting-time"
           name="enrollment-time" class="add-date-and-time" @bind-value="StartDate">

</div>
        </td>
        </tr>  
        <tr>
            <td<label for="Enrollment-time">To</label></td>
<div>

    <td>
    <input type="datetime-local" id="meeting-time"
           name="enrollment-time" class="add-date-and-time" @bind-value="EndDate">
            </td>
</div>
        </tr>
    </tbody>
</table>
<AuthorizeView Roles="Parent">
    <h3>Chose your child</h3>
    
    <InputSelect @bind-Value="studentsid" class="form-select">
        <option value=0>--- Select ---</option>
@foreach (var child in StudentService.Students)
{
            if(child.ParentID == Id)
        {
                
            <option value="@child.StudentID">@child.FirstName @child.LastName</option>
            
        }
        
}
    </InputSelect>
 </AuthorizeView>
            </th>
            <th rowspan="2" class="secondrow1">
<table class="Attendances-table">
    <thead>
        <tr>
            <th rowspan="2">Day</th>
                <th colspan="@countdown">Lesson</th>

        </tr>
    <tr>
        @for (int i = countdown; i > 0; i--)
        {
                if (countdown <= countup)
                {
                    countup = 0;
                }
                countup++;
                <th>@countup</th>

        }
    </tr>
    </thead>
    <tbody>
        @for (DateTime ForDate = StartDate; 0>=DateTime.Compare(ForDate, EndDate); ForDate=ForDate.AddDays(1))
        {
            int i = countdown;
            <tr>
                <td>@ForDate.Day/@ForDate.Month/@ForDate.Year @ForDate.DayOfWeek</td>
                @foreach(var testatendence in AttendanceService.Attendances)
                {
                    
                    if (studentsid==testatendence.StudentID)
                    {                        
                    @foreach (var lesson in EnrollmentService.Enrollments)
                    {
                            if(testatendence.EnrollmentID==lesson.EnrollmentID)
                            {


                                if (ForDate.Day == lesson.Date.Day && ForDate.Month == lesson.Date.Month && ForDate.Year == lesson.Date.Year)
                                {
                                    if (testatendence.Description=="Excused")
                                    {

                                        <td>
                                            <div class="bluesquare">
                                                <span class="tooltiptextb">
                                                    @lesson.Subject.SubjectName
                                                    @lesson.Date
                                                    @testatendence.Description;
                                                </span>
                                            </div>
                                        </td>
                                        i = i - 1;
                                    }
                                    if (testatendence.Description == "Present")
                                    {
                                        <td>
                                            <div class="greensquare">
                                                <span class="tooltiptextg">
                                                    @lesson.Subject.SubjectName
                                                    @lesson.Date
                                                    @testatendence.Description;

                                                </span>
                                            </div>
                                        </td>
                                        i = i - 1;
                                    }
                                    if (testatendence.Description == "Absent")
                                    {
                                        <td>
                                            <div class="redsquare">
                                                <span class="tooltiptextr">
                                                    @lesson.Subject.SubjectName
                                                    @lesson.Date
                                                    @testatendence.Description;
                                                </span>
                                            </div>
                                        </td>
                                        i = i - 1;
                                    }
                                    if (testatendence.Description == "Late")
                                    {
                                        <td>
                                            <div class="yellowsquare">
                                                <span class="tooltiptexty">
                                                    @lesson.Subject.SubjectName
                                                    @lesson.Date
                                                    @testatendence.Description;
                                                </span>
                                            </div>
                                        </td>
                                        i = i - 1;
                                    }
                                }
                            }
                        }
                    }
                    
                }
                @for (int j = i; j > 0; j--)
                {
                    <td>
                        <div class = "emptysquare"></div>
                    </td>
                }
            </tr>
            i = countdown;
        }
    </tbody>
</table>
            </th>
        </tr>
        <tr>
            <th class="firstrow2">
        <table class="Legend">
            <thead>
                <tr>
                    <th>
                        <div class="greensquare"></div>
                    </th>
                    <th>
                        Present
                    </th>
                </tr>
                <tr>
                    <th>
                        <div class="redsquare"></div>
                    </th>
                    <th>
                        Absent
                    </th>
                </tr>
                <tr>
                    <th>
                        <div class="yellowsquare"></div>
                    </th>
                    <th>
                        Late
                    </th>
                </tr>
                <tr>
                    <th>
                        <div class="bluesquare"></div>
                    </th>
                    <th>
                        Excused
                    </th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
            </th>
        </tr>
</thead>
<tbody>
</tbody>
</table>

@code {
    protected override async Task OnInitializedAsync()
    {
        await AttendanceService.GetAttendances();
        await StudentService.GetStudents();
        await ParentService.GetParents();
        await EnrollmentService.GetEnrollments();
        await GetClaimsGetID();
    }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState
    {
        get; set;
    }
    IList<Student> students = new List<Student>();
    int ID;
    int? Id = null;
    int? studentsid = null;
    int countdown = 10;
    int countup = 0;
    int howmany = 0;
    string Roles;
    DateTime StartDate = DateTime.Now.AddDays(-6);
    DateTime EndDate = DateTime.Now;
    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                Roles = claim.Value;
            }
        };

        if (Roles == "Parent")
        {
            foreach (var studentpom in ParentService.Parents)
            {
                if (studentpom.ParentID == ID)
                {
                    Id = studentpom.ParentID;
                }
            }

        }
        else
        {
            if (Roles == "Student")
            {
                foreach (var studentpom in StudentService.Students)
                {
                    if (studentpom.StudentID == ID)
                    {
                        studentsid = studentpom.StudentID;
                    }
                }
            }


        }
    }
    void ShowAttendance(int id)
    {
        NavigationMenager.NavigateTo($"attendance/{id}");
    }
    void CreateAttendance()
    {
        NavigationMenager.NavigateTo("/attendance");
    }

}