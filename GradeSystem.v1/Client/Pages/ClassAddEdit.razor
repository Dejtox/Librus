@page "/classs"
@page "/classs/{id:int}"
@inject IClassService ClassService

@if (ID == null)
{
    <PageTitle>Add new Class</PageTitle>
    <h3>Add new Class</h3>
}
else
{
    <PageTitle>Edit @classs.ClassName</PageTitle>
    <h3>Edit @classs.ClassName</h3>
}


<EditForm Model="classs" OnSubmit="HandleSubmit">
    <div>
        <label for="classname">Class Name</label>
        <InputText id="firstname" @bind-Value="classs.ClassName" class="form-control"></InputText>
    </div>
    <div>
        <label for="classname">Teacher</label>
        <InputSelect @bind-Value="classs.TeacherID" class="form-select">
            @foreach (var teacher in ClassService.Teachers)
            {
                <options value="@teacher.TeacherID">@teacher.FirstName @teacher.LastName</options>

            }
        </InputSelect>      
    </div>

    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DelateTeacher">Delete Teacher</button>

</EditForm>


@code {
    [Parameter]
    public int? ID { get; set; }

    Class classs = new Class();
    string btnText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Class" : "Update Class";
        await ClassService.GetTeachers();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {
            await ClassService.GetTeachers();
            classs.Teacher = ClassService.Teachers[0];
            Console.WriteLine(ClassService.Teachers[0].FirstName);
            classs.TeacherID = classs.Teacher.TeacherID;
        }
        else
        {
            classs = await ClassService.GetClassByID((int)ID);
        }
    }
    async Task HandleSubmit()
    {
        if (ID == null)
        {
            await ClassService.CreateClass(classs);
        }
        else
        {
            await ClassService.UpdateClass(classs);
        }
    }
    async Task DelateTeacher()
    {

        await ClassService.DeleteClass(classs.TeacherID);

    }

}
