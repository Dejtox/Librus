@page "/extraClasses"
@inject IExtraClassesService ExtraClassesService
@inject IExtraClassesListService ExtraClassesListService
@inject IStudentService StudentService
@inject IUserService UserService
@inject NavigationManager NavigationMenager

@inject IJSRuntime js
@attribute [Authorize(Roles ="Teacher, Parent, Student")]

<PageTitle> Extra Classes </PageTitle>
<p class="h1">Extra Classes</p>


@foreach (var extraClass in ExtraClassesService.ExtraClasses)
{
    random();
    Console.WriteLine(color);
    Console.WriteLine(randomNumber);
    <div style="background-image:@color;" class="container p-1 col-sm-5 col-11 m-1 d-inline-flex border border-primary rounded red">
        <div class="w-100 row justify-content-between">
            <div class="col-sm-6 col-6">
                <p class="h1">@extraClass.ExtraClassesName</p>
                <p class="h6">@extraClass.Teacher.FirstName @extraClass.Teacher.LastName</p>
            </div>
            <div class="col-sm-6 col-6">
                <p class="h2 d-flex flex-row-reverse">@extraClass.CurrentCapasity / @extraClass.MaxCapasity</p>
                <p class="h7 d-flex flex-row-reverse">@extraClass.ExtraClassesDate.Date</p>
            </div>
            <div col-12 col-sm-12>
                <p class="h5">@extraClass.ExtraClassesDescription</p>
            </div>
                <AuthorizeView Roles="Teacher">
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>ShowExtraClasses(extraClass.ExtraClassesID))"><i class="oi oi-pencil">Edit</i></button>
                    </td>
                </AuthorizeView>
                <AuthorizeView Roles="Student, Parent">
                    @if (YourExtraClasses.Contains(extraClass.ExtraClassesID))
                    {
                        <td>
                            <button class="btn btn-danger" @onclick="(()=>Resign(extraClass.ExtraClassesID))"><i class="oi oi-x ">Unsign</i></button>
                        </td>
                    }
                    else
                    {
                        <td>
                            <button class="btn btn-secondary" @onclick="(()=>SignTooExtraClasses(extraClass.ExtraClassesID))"><i class="oi oi-check">Sign</i></button>
                        </td>
                    }
                </AuthorizeView>
        </div>
    </div>
}

<button type="button" class="btn btn-primary d-block" @onclick="CreateExtraClasses">Create New</button>


@code {
    int ID;
    string Roles;
    string color;
    int randomNumber=1;
    int ParentID;
    int cuerentcapasity = 0;
    List<int> YourExtraClasses = new List<int>();
    Student student = new Student();

    ExtraClassesList extraClassesList = new ExtraClassesList();

    protected override async Task OnInitializedAsync()
    {
        await ExtraClassesService.GetExtraClasses();
        await StudentService.GetStudents();
        await ExtraClassesListService.GetExtraClassesList();
        await GetClaimsGetID();
        await GetYourClasses();
        await GetCapacity();
    }

    public void random()
    {

        if (randomNumber == 1)
        {
            color = "linear-gradient(to top, #56ab2f, #a8e063)";
            randomNumber++;
        }
        else if (randomNumber == 2)
        {
            color = "linear-gradient(to bottom, #56ccf2, #2f80ed)";
            randomNumber++;
        }
        else if (randomNumber == 3)
        {
            color = "linear-gradient(to top, #fffc00, #ffffff);";
            randomNumber++;
        }
        else if (randomNumber == 4){
            color = "linear-gradient(to top, rgba(101, 101, 233, 0.5), rgba(102, 9, 148,0.5));";
            randomNumber = 1;
        }
    }

    async Task GetCapacity()
    {
        foreach (var ec in ExtraClassesService.ExtraClasses)
        {
            cuerentcapasity = 0;
            foreach (var ecl in ExtraClassesListService.ExtraClassesLists)
            {
                if (ecl.ExtraClassesID == ec.ExtraClassesID)
                {
                    cuerentcapasity++;

                }
            }
            ec.CurrentCapasity = cuerentcapasity;
            await ExtraClassesService.UpdateExtraClasses(ec);
        }

        await ExtraClassesService.GetExtraClasses();

    }
    async Task GetYourClasses()
    {
        if (Roles == "Parent")
        {
            foreach (var studentpom in StudentService.Students)
            {
                if (studentpom.ParentID == ID)
                {
                    student = studentpom;
                }
            }

        }
        else
        {
            foreach (var studentpom in StudentService.Students)
            {
                if (studentpom.StudentID == ID)
                {
                    student = studentpom;
                }
            }

        }
        foreach (var ecl in ExtraClassesListService.ExtraClassesLists)
        {
            if (ecl.StudentID == student.StudentID)
            {
                YourExtraClasses.Add(ecl.ExtraClassesID);

            }

        }

    }
    async Task Resign(int id)
    {
        foreach (var ecl in ExtraClassesListService.ExtraClassesLists)
        {
            if (ecl.StudentID == student.StudentID && ecl.ExtraClassesID == id)
            {

                await ExtraClassesListService.DeleteExtraClassesList(ecl.ExtraClassesListID);

            }
        }
        await ExtraClassesService.GetExtraClasses();
        await GetCapacity();
        NavigationMenager.NavigateTo($"/extraclasses");

    }
    void ShowExtraClasses(int id)
    {
        NavigationMenager.NavigateTo($"/extraclass/{id}");
    }
    async Task SignTooExtraClasses(int id)
    {
        extraClassesList.ExtraClassesID = id;
        
        extraClassesList.StudentID = student.StudentID;
        extraClassesList.DateTime = DateTime.Now;
        extraClassesList.Student = student;
        extraClassesList.ExtraClasses = await ExtraClassesService.GetExtraClassesByID(id);
        await ExtraClassesListService.GetExtraClassesList();
        await ExtraClassesListService.CreateExtraClassesList(extraClassesList);
        await ExtraClassesService.GetExtraClasses();
        await ExtraClassesListService.GetExtraClassesList();
        await GetCapacity();

            NavigationMenager.NavigateTo($"/extraclasses");


    }
    void CreateExtraClasses()
    {
        NavigationMenager.NavigateTo("/extraclass");
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                Roles = claim.Value;
            }
        };
    }
}

