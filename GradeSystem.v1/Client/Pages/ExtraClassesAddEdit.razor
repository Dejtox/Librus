@page "/extraclass"
@page "/extraclass/{id:int}"
@inject IExtraClassesService ExtraClassesService
@attribute [Authorize(Roles = "Teacher, Parent, Student")]

@if (ID == null)
{
    <PageTitle>Add new Additional Activity</PageTitle>
    <h3>Add new Additional Activity</h3>
}
else
{
    <PageTitle>Edit @extraClasses.ExtraClassesName </PageTitle>
    <h3>Edit @extraClasses.ExtraClassesName</h3>
}


<EditForm Model="extraClasses" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">Additional Activity Name</label>
        <InputText id="firstname" @bind-Value="extraClasses.ExtraClassesName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lasttname">Additional Activity Description</label>
        <InputText id="lastname" @bind-Value="extraClasses.ExtraClassesDescription" class="form-control"></InputText>
    </div>
    <div>
        <label for="classname">Teacher</label>
        <InputSelect @bind-Value="extraClasses.TeacherID" class="form-select">
            
            @foreach (var teacher in ExtraClassesService.Teacher)
            {
                <option value="@teacher.TeacherID">@teacher.FirstName @teacher.LastName</option>

            }
        </InputSelect>      
    </div>
    <div>
        <label for="Enrollment-time">Additional Activity Date</label>
        <input type="datetime-local" id="meeting-time"
               name="enrollment-time" @bind-value="extraClasses.ExtraClassesDate">

    </div>
    <div>
        <label for="classroom">Class Room</label>
        <InputText id="classroom" @bind-Value="extraClasses.ClassRoom" class="form-control"></InputText>
    </div>
    <div>
        <label for="gradeweight">Max Capasity</label>
        <InputNumber id="gradeweight" @bind-Value="extraClasses.MaxCapasity" class="form-control"></InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DelateTeacher">Delete Activity</button>

</EditForm>


@code {
    [Parameter]
    public int? ID { get; set; }

    ExtraClasses extraClasses = new ExtraClasses();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Activity" : "Delete Acivity";
        await ExtraClassesService.GetTeachers();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {

        }
        else
        {
            extraClasses = await ExtraClassesService.GetExtraClassesByID((int)ID);
        }
    }
    async Task HandleSubmit()
    {
        if (ID == null)
        {
            extraClasses.CurrentCapasity = 0;
            await ExtraClassesService.CreateExtraClasses(extraClasses);
        }
        else
        {
            await ExtraClassesService.UpdateExtraClasses(extraClasses);
        }
    }
    async Task DelateTeacher()
    {
        await ExtraClassesService.DeleteExtraClasses(extraClasses.ExtraClassesID);
    }

}
