@page "/Library"
@inject IBookService BookService
@inject IStudentService StudentService
@inject IBookServiceSupport BookServiceSupport
@inject NavigationManager NavigationManager
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Text.RegularExpressions;
<h3>Library</h3>

<div>
    @if (yourbooks == true)
    {
        <div><button @onclick="BorrowBooks">Borrow Books</button></div>
    }
    else
    {
        <button disabled>Borrow Books</button>
    }
    @if (yourbooks == false)
    {
        <div><button @onclick="YourBooks">Your Books</button></div>
    }
    else
    {
        <button disabled>Your Books</button>
    }
</div>
<div>
    <input @oninput="FillTable" />
    @btnText
</div>
<body>
    <div class="booklist">
        @foreach (var booktype in BookServiceSupport.BookList)
        {
            string imgurl = "/Img/" + @booktype.Title + @booktype.Author + @booktype.Edition + ".jpg";
            <div class="book-item">
                <h3 type="liblarybookbox"><img src=@imgurl></h3>
                <h3>@booktype.Title</h3>
                <h3>@booktype.Author</h3>
                <h3>@booktype.Edition</h3>
                <h3>@booktype.AmountOfBooks</h3>
                @if (booktype.AmountOfBooks > 0)
                {
                    bool pom = false;
                    foreach (var book in booktype.Books)
                    {


                        if (book.StudentId == ID)
                        {
                            pom = true;
                            break;
                        }

                    }
                    <h3>
                        @if (!pom)
                        {
                            <button class="libraryreservatebutton" @onclick="(()=>Reserve(booktype.Books[0]))">Reserve</button>
                        }
                        else
                        {
                            <button disabled class="libraryreservatebutton">Reservetion limit reached</button>
                        }
                    </h3>


                }
                else
                {
                    <a>Out of stock</a>
                }

            </div>


        }
    </div>
</body>

@code {

    IList<BookView> BookAmount = new List<BookView>();

    // FillTable wykrywa przycisk które są naciskane na klawiaturze by automatycznie updatowac wyświetlana liste.
    async Task FillTable(ChangeEventArgs args)
    {


        btnText = args.Value.ToString();

        await BookServiceSupport.UpdateList(isawailable, btnText);
    }

    protected override async Task OnInitializedAsync()
    {
        await StudentService.GetStudents();
        await GetClaimsGetID();
        await BookService.GetBooks();
        await BookServiceSupport.UpdateList(isawailable, btnText);
    }

    string bar;
    bool isawailable = false;
    bool yourbooks = false;
    string btnText = string.Empty;
    int ID;
    Student student;
    BookType booktype;
    BookType booktype2;
    string Roles;
    void EditBook(int QR)
    {
        NavigationManager.NavigateTo($"Book/{QR}");
    }
    void AddBook()
    {
        NavigationManager.NavigateTo($"Book");
    }

    async Task DoUpdateList()
    {
        await BookServiceSupport.UpdateList(isawailable, btnText);
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                Roles = claim.Value;
            }
        };

        if (Roles == "Parent")
        {
            foreach (var studentpom in StudentService.Students)
            {
                if (studentpom.ParentID == ID)
                {
                    student = studentpom;
                }
            }

        }
        else
        {
            if (Roles == "Student")
            {
                foreach (var studentpom in StudentService.Students)
                {
                    if (studentpom.StudentID == ID)
                    {
                        student = studentpom;
                    }
                }
            }


        }
    }

    async Task BorrowBooks()
    {
        yourbooks = false;
        await BookServiceSupport.UpdateList(isawailable, btnText);
    }

    async Task YourBooks()
    {
        yourbooks = true;
        await BookServiceSupport.UpdateList(isawailable, btnText);
    }

    async Task Reserve(Book book)
    {
        book.StudentId = ID;
        book.IsBoocked = true;
        await BookService.UpdateBook(book);
        await BookServiceSupport.UpdateList(isawailable, btnText);
    }
    //                    <td><button class="btn btn-primary" @onclick="(()=>BookTheBook(Book))">Reservate</button></td>
}



