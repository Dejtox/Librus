@page "/parent"
@page "/parent/{id:int}"
@inject IParentService ParentService
@inject IUserService UserService

@if (ID == null)
{
    <PageTitle>Add new Parent</PageTitle>
    <h3>Add new Parent</h3>
}
else
{
    <PageTitle>Edit @parent.FirstName @parent.LastName</PageTitle>
    <h3>Edit @parent.FirstName @parent.LastName</h3>
}


<EditForm Model="parent" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="parent.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lasttname">Last Name</label>
        <InputText id="lastname" @bind-Value="parent.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="parent.Email" class="form-control"></InputText>
    </div>
    <div>
        <label for="phonenumber">Phone Number</label>
        <InputText id="phonenumber" @bind-Value="parent.PhoneNumber" class="form-control"></InputText>
    </div>
    <div>
        <label for="login">Login</label>
        <InputText id="login" @bind-Value="userpom.Login" class="form-control"></InputText>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="userpom.PasswordHash" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DelateParent">Delete Parent</button>

</EditForm>


@code {
    [Parameter]
    public int? ID { get; set; }
    User userpom = new User();
    Parent parent = new Parent();
    UserDto user = new UserDto();    
    List<string> rolesp = new List<string>();

    string btnText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Parent" : "Update Parent";
        rolesp.Add("Parent");
        await ParentService.GetParents();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {

        }
        else
        {
            parent = await ParentService.GetParentById((int)ID);
            user.User = await UserService.GetUserByID(parent.UserID);
        }
    }
    async Task HandleSubmit()
    {
        if (ID==null)
        {
            //user.UserRole = "Parent";
            user.User = userpom;
            user.Roles = rolesp;
            await UserService.CreateUser(user);
            await UserService.GetUsers();
            parent.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await ParentService.CreateParent(parent);
        }
        else
        {
            //user.UserRole = "Parent";
            //await UserService.CreateUser(user);
            await UserService.GetUsers();
            parent.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await ParentService.UpdateParent(parent);
        }
    }
    async Task DelateParent()
    {
        await UserService.DeleteUser(parent.UserID);
        await ParentService.DeleteParent(parent.ParentID);
    }
}
