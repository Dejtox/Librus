@page "/school_trip"
@page "/school_trip/{id:int}"
@inject NavigationManager NavigationManager
@inject ISchoolTripService SchoolTripService
@inject DialogService DialogService

<RadzenTemplateForm TItem="SchoolTrip" Data=@schoolTrip Submit=@HandleSubmit>
<div class="form-group">
    <RadzenLabel Text="Start Date"/>
    <RadzenDatePicker Name="StartDate" @bind-Value="schoolTrip.StartDate" Style="width:100%"/>
</div>
<div class="form-group">
    <RadzenLabel Text="End Date" />
    <RadzenDatePicker Name="EndDate" @bind-Value="schoolTrip.EndDate" Style="width:100%" />
    <RadzenCompareValidator Component="EndDate" Operator="CompareOperator.GreaterThan" Value="schoolTrip.StartDate" Text="End date should be greater than start date" Popup="true" Style="display:block;" />
</div>
<div class="form-group">
    <RadzenLabel Text="Trip Name" />
    <RadzenTextBox Name="TName" @bind-Value="schoolTrip.Name" Style="width:100%" />
    <RadzenLengthValidator Popup="true" Style="display:block;" Component="TName" Min="3" Text="Trip name should be at least 3 characters" />
    <RadzenLengthValidator Component="TName" Max="100" Text="Trip Name should be at most 100 characters" Popup="true" Style="display:block;" />
</div>
<div class="form-group">
    <RadzenLabel Text="Trip Description" />
    <RadzenTextArea Name="Description" @bind-Value="schoolTrip.Description" Style="width:100%" />
    <RadzenLengthValidator Popup="true" Style="display:block;" Component="Description" Min="3" Text="Trip descritpion should be at least 3 characters" />
    <RadzenLengthValidator Component="Description" Max="100" Text="Trip description should be at most 1000 characters" Popup="true" Style="display:block;" />
</div>
<div class="form-group">
    <RadzenLabel Text="Classes" Component="DropDownMultipleChipsC" Style="font-weight:bold;" />
    <RadzenDropDown @bind-Value=@classIDs Data=@SchoolTripService.Classes TextProperty="ClassName" ValueProperty="ClassID" Name="DropDownMultipleChipsC"
                    Multiple=true AllowClear=true Placeholder="Search..." Chips=true Style="width:100%;" SelectAllText="Select all classes" />
    <RadzenRequiredValidator Component="DropDownMultipleChipsC" Text="Please select at least one class" Popup="true" Style="display:block;" />
</div>
<div class="form-group">
    <RadzenLabel Text="Teachers" Component="DropDownMultipleChipsT" Style="font-weight:bold;" />
    <RadzenDropDown @bind-Value=@teacherIDs Data=@SchoolTripService.Teachers TextProperty="Name" ValueProperty="TeacherID" Name="DropDownMultipleChipsT"
                    Multiple=true AllowClear=true Placeholder="Search..." Chips=true Style="width:100%;" SelectAllText="Select all teachers" />
    <RadzenRequiredValidator Component="DropDownMultipleChipsT" Text="Please select at least one teacher" Popup="true" Style="display:block;"/>
</div>
<br />
<div class="button-container">
    <div style="display:flex;gap:10px;">
        <button type="submit" class="rounded-empty-button">@btnText</button>
        @if (ID != null)
        {
            <button type="button" class="rounded-filled-button" @onclick="DeleteSchoolTrip">Delete Trip</button>
        }
    </div>
    <button type="button" @onclick="CloseDialog" class="close-button">Close</button>
</div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public int? ID { get; set; }
    SchoolTrip schoolTrip = new SchoolTrip();
    SchoolTripCombined schoolTripCombined = new SchoolTripCombined();
    List<int> teacherIDs { get; set; }=new List<int>();
    List<int> classIDs  { get; set; } =new List<int>();
    string btnText = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Trip" : "Update Trip";
        await SchoolTripService.GetClasses();
        await SchoolTripService.GetTeachers();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID != null)
        {
            schoolTrip = await SchoolTripService.GetSchoolTripByID((int)ID);
            teacherIDs= schoolTrip.SchoolTripTeachers.Select(t => t.TeacherID).ToList();
            classIDs = schoolTrip.SchoolTripClasses.Select(c => c.ClassID).ToList();
        }
    }

    async void HandleSubmit()
    {
        schoolTripCombined.Teachers = SchoolTripService.Teachers.Where(t => teacherIDs.Contains(t.TeacherID)).ToList();
        schoolTripCombined.Classes=SchoolTripService.Classes.Where(c => classIDs.Contains(c.ClassID)).ToList();
        schoolTripCombined.SchoolTrip = schoolTrip;

        if (ID == null)
        {
            await SchoolTripService.CreateSchoolTrip(schoolTripCombined);
        }
        else
        {
            await SchoolTripService.UpdateSchoolTrip(schoolTripCombined);
        }
        NavigationManager.NavigateTo("/school_trips");
    }
    void CloseDialog()
    {
        DialogService.Close();
    }
    async Task DeleteSchoolTrip()
    {
        await SchoolTripService.DeleteSchoolTripByID(schoolTrip.SchoolTripID);
    }
}
