@page "/stdlasrarrendences"
@using System.Globalization;
@inject IStudentService StudentService
@inject IAttendanceService AttendanceService
@inject IEnrollmentService EnrollmentService
<div class="RGtable">
    <div class="RGtableheader">
        <div class="RGtitle">Attendece</div>
    </div>
@*
<div>
    <div>
       
        <div>
            <select name="" id="" class="fluent-input" @onchange="SelectYear">
                @for (int i = 2022; i < 2024; i++)
                {
                    <option>@i</option>
                }
            </select>
        </div>
        <div>
            <select name="" id="" class="fluent-input" @onchange="SelectMonth">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">Sepetemper</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>
        </div>

        
    </div>
</div>
*@
    <div class="dateselectbotommenu">
    @if (SelectedDate.Day - 4 > 0)
    {
        <div class="dateselectspace">
            <div></div>
            <div>
                    <button type="button" class="dateselectbutton" aria-label="Close" @onclick="Lower">
                        <div class="gg-chevron-left"></div>
                    </button>
            </div>
        </div>
    }
    else
    {
            <div class="dateselectspace">
                <div></div>
                <div>
                    <button disabled class="dateselectbutton">
                        <div class="gg-chevron-left"></div>
                    </button>
                </div>
            </div>
    }

    @if (SelectedDate.Day - 3 >= 0)
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(-3).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@(SelectedDate.Day - 3)</button>
                </div>
            </div>
    }
    @if (SelectedDate.Day - 2 >= 0)
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(-2).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@(SelectedDate.Day - 2)</button>
                </div>
            </div>
    }
    @if (SelectedDate.Day - 1 >= 0)
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(-1).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@(SelectedDate.Day - 1)</button>
                </div>
            </div>
    }
        <div class="dateselectspace">
            <div class="dateselectbutton">
                @SelectedDate.ToString("ddd", CultureInfo.InvariantCulture)</div>
            <div>
                <button class="dateselectbutton">@SelectedDate.Day</button>
            </div>
        </div>
    @if (SelectedDate.Day + 1 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(1).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@SelectedDate.AddDays(1).Day </button>
                </div>
            </div>
    }
    @if (SelectedDate.Day + 2 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(2).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@SelectedDate.AddDays(2).Day </button>
                </div>
            </div>
    }
    @if (SelectedDate.Day + 3 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {
            <div class="dateselectspace">
                <div class="dateselectbutton">@SelectedDate.AddDays(3).ToString("ddd", CultureInfo.InvariantCulture)</div>
                <div>
                    <button class="dateselectbutton">@SelectedDate.AddDays(3).Day </button>
                </div> 
            </div>
    }
    @if (SelectedDate.Day + 4 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {
            <div class="dateselectspace">
                <div></div>
                <div>
                    <button type="button" class="dateselectbutton" aria-label="Close" @onclick="Higher">
                        <div class="gg-chevron-right"></div>
                    </button>
                </div>
            </div>
    }
    else
    {
            <div class="dateselectspace">
                <div></div>
                <div>
                    <button disabled class="dateselectbutton">
                        <div class="gg-chevron-right"></div>
                    </button>
                </div>
            </div>
    }  
    </div>
    <div class ="dataselcettable">
        <div class="RGtable">
            @foreach (var dalyevent in Events)
        {
            if (dalyevent.Enrollment.Date.Day == SelectedDate.Day)
            {
                <div class="RGtablerow">
                        <div class="dataselecttablesub">
                            <div>@dalyevent.Enrollment.Subject.SubjectName</div>
                        </div>
                        <div class="dataslecettablestat">
                            <div>@dalyevent.Description</div>
                        </div>
                </div>              
            }
        }
        </div>
    </div>
    
</div>
@code {
    int ID;
    Student student;
    DateTime SelectedDate;
    int? Id = null;
    Teacher teacher = null;
    string Roles;
    List<Attendance> Events = new List<Attendance>();
    List<Attendance> Atdlist = new List<Attendance>();


    protected override async Task OnInitializedAsync()
    {
        SelectedDate = DateTime.Now;
        await EnrollmentService.GetEnrollments();
        await StudentService.GetStudents();
        await AttendanceService.GetAttendances();  
        await GetClaimsGetID();
        await Filllastattendeces();
        await NewDate();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                Roles = claim.Value;
            }
        }

        if (Roles == "Student")
        {
            foreach (var studentpom in StudentService.Students)
            {
                if (studentpom.StudentID == ID)
                {
                    student = studentpom;
                }
            }
        }
    }
    private void Lower()
    {
        SelectedDate = SelectedDate.AddDays(-1);
        StateHasChanged();
    }
    private void Higher()
    {
        SelectedDate = SelectedDate.AddDays(1);
        StateHasChanged();
    }

    async Task Filllastattendeces()
    {
        foreach (var evn in AttendanceService.Attendances)
        {
            if (evn.StudentID == Id)
            {
                Atdlist.Add(evn);
            }
        }
        Addenrolmentstoatd();
    }

    async Task Addenrolmentstoatd()
    {
        foreach(var atd in Atdlist)
        {
            foreach(var enr in EnrollmentService.Enrollments)
            {
                if(atd.EnrollmentID == enr.EnrollmentID)
                {
                    atd.Enrollment = enr;
                }
            }
        }
        await NewDate();
    }

    async Task NewDate()
    {
        int i = 0;
        foreach (var evn in Atdlist)
        {
            if (evn.Enrollment.Date.Month == SelectedDate.Month & evn.Enrollment.Date.Year == SelectedDate.Year)
            {
                    if (Events.Count != 0)
                    {
                        foreach (var evnt in Events)
                        {
                            if (DateTime.Compare(evn.Enrollment.Date, evnt.Enrollment.Date) < 0)
                            {
                                Events.Insert(i, evn);
                                i = 0;
                                break;
                            }
                            else
                            {
                                i++;
                                if (Events.Count <= i)
                                {
                                    Events.Add(evn);
                                    i = 0;
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        Events.Add(evn);
                    }
                
            }
        }
        StateHasChanged();
    }

    async Task SelectYear(ChangeEventArgs e)
    {
        int i = Convert.ToInt32(e.Value.ToString());
        SelectedDate.Year.Equals(i);
        await NewDate();
    }
    async Task SelectMonth(ChangeEventArgs e)
    {
        int month = Convert.ToInt32(e.Value.ToString());
        SelectedDate = new DateTime(SelectedDate.Year, month, 4);
        await NewDate();
    }
    


}
