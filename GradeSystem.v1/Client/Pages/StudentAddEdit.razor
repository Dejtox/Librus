@page "/student"
@page "/student/{id:int}"
@inject IStudentService StudentService
@inject IUserService UserService

@if(ID==null)
{
    <PageTitle>Add new student</PageTitle>
    <h3>Add new student</h3>
}
else
{
    <PageTitle>Edit @student.FirstName @student.LastName</PageTitle>
    <h3>Edit @student.FirstName @student.LastName</h3>
}
<EditForm Model="student" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="student.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lasttname">Last Name</label>
        <InputText id="lastname" @bind-Value="student.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="student.Address" class="form-control"></InputText>
    </div>
    <div>
        <label for="pesel">Pesel</label>
        <InputText id="pesel" @bind-Value="student.Pesel" class="form-control"></InputText>
    </div>
    <div>
        <label for="login">Login</label>
        <InputText id="login" @bind-Value="user.Login" class="form-control"></InputText>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.PasswordHash" class="form-control"></InputText>
    </div>
    <div>
        <label for="classname">Class</label>
        <InputSelect @bind-Value="student.ClassID" class="form-select">

            @foreach (var classs in StudentService.Classes)
            {
                <option value="@classs.ClassID">@classs.ClassName</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="parentname">Parent</label>
        <InputSelect @bind-Value="student.ParentID" class="form-select">
            <option value=0>--- Select ---</option>
            @foreach (var parent in StudentService.Parents)
            {
                <option value="@parent.ParentID">@parent.FirstName @parent.LastName</option>

            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DelateParent">Delete Parent</button>
</EditForm>

@code {
    [Parameter]
    public int? ID { get; set; }

    Student student = new Student();
    User user = new User();

    string btnText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Parent" : "Update Parent";
        await StudentService.GetStudents();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {
            await StudentService.GetParents();
            await StudentService.GetClasses();
        }
        else
        {
            student = await StudentService.GetStudentById((int)ID);
            user = await UserService.GetUserByID(student.UserID);
        }
    }
    async Task HandleSubmit()
    {
        if (ID == null)
        {
            //user.UserRole = "Student";
            //await UserService.CreateUser(user);
            await UserService.GetUsers();
            student.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await StudentService.CreateStudent(student);
        }
        else
        {
            //user.UserRole = "Student";
            await StudentService.UpdateStudent(student);
            await UserService.UpdateUser(user);
        }
    }
    async Task DelateParent()
    {
        await UserService.DeleteUser(student.UserID);
        await StudentService.DeleteStudent(student.ParentID);
    }
}

            @*To co dodaje pod spodem to kod ktorego nie bylem pewny musze robic merge manualnie 
            i nie jestem pewien ktora werjsa kodu jest poprawna w razie potrzeb mozna odkometowac to co pod spodem*@


            @*
                @page "/student"
@page "/student/{id:int}"
@inject IStudentService StudentService
@inject IUserService UserService
@inject IClassService ClassService

@if (ID == null)
{
        <PageTitle>Add new student</PageTitle>
        <h3>Add new student</h3>
}
else
{
        <PageTitle>Edit @student.FirstName @student.LastName</PageTitle>
        <h3>Edit @student.FirstName @student.LastName</h3>
}
<EditForm Model="student" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="student.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="student.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="address">Address</label>
        <InputText id="address" @bind-Value="student.Address" class="form-control"></InputText>
    </div>
    <div>
        <label for="pesel">Pesel</label>
        <InputText id="pesel" @bind-Value="student.Pesel" class="form-control"></InputText>
    </div>
    <div>
        <label for="login">Login</label>
        <InputText id="login" @bind-Value="user.Login" class="form-control"></InputText>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.PasswordHash" class="form-control"></InputText>
    </div>
    <div>
        <label for="classname">MainClass</label>
        <InputSelect @bind-Value="student.ClassID" class="form-select">

            @foreach (var classs in ClassService.Classes)
            {
                if (classs.VirtualClass != true)
                {
                    <option value="@classs.ClassID">@classs.ClassName</option>
                }
            }
        </InputSelect>
    </div>

    <div>
        <label for="classes">VirtualClasses</label>
        <select id="classes" multiple @onchange="HandleClassSelection" class="form-select">
            @foreach (var classs in ClassService.Classes)
            {
                if(classs.VirtualClass == true)
                {
                    <option value="@classs.ClassID" selected="@student.ClassIdList.Contains(classs.ClassID)">@classs.ClassName</option>
                }

            }
        </select>
    </div>
    <div>
        <label for="parentname">Parent</label>
        <InputSelect @bind-Value="student.ParentID" class="form-select">
            <option value=0>--- Select ---</option>
            @foreach (var parent in StudentService.Parents)
            {
                    <option value="@parent.ParentID">@parent.FirstName @parent.LastName</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteParent">Delete Parent</button>
</EditForm>

@code {
    [Parameter]
    public int? ID { get; set; }

    Student student = new Student();
    User user = new User();
    List<int> selectedClassIds = new List<int>();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Student" : "Update Student";
        await ClassService.GetClasses();
        if (ID != null)
        {
            student = await StudentService.GetStudentById((int)ID);
            user = await UserService.GetUserByID(student.UserID);
            selectedClassIds = student.ClassIdList.ToList();
        }
        else
        {
            await StudentService.GetParents();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID != null)
        {
            student = await StudentService.GetStudentById((int)ID);
            user = await UserService.GetUserByID(student.UserID);
            selectedClassIds = student.ClassIdList.ToList();
        }
    }

    async Task HandleSubmit()
    {
        student.ClassIdList = selectedClassIds;
        student.StringClassIdList = string.Join(";", selectedClassIds);

        if (ID == null)
        {
            user.UserRole = "Student";
            await UserService.CreateUser(user);
            await UserService.GetUsers();
            student.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await StudentService.CreateStudent(student);
        }
        else
        {
            await StudentService.UpdateStudent(student);
            await UserService.UpdateUser(user);
        }
    }

    async Task DeleteParent()
    {
        await UserService.DeleteUser(student.UserID);
        await StudentService.DeleteStudent(student.StudentID);
    }

    void HandleClassSelection(ChangeEventArgs e)
    {
        selectedClassIds.Clear();
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            foreach (var option in selectedOptions)
            {
                var classId = int.Parse(option);
                selectedClassIds.Add(classId);
            }
        }
    }
}

            *@