@page "/studentcardparent"
@using System.Security.Claims
@inject IJSRuntime js
@inject IStudentService StudentService
@inject IParentService ParentService
@inject IUserService UserService
@inject NavigationManager NavigationMenager
@inject AuthenticationStateProvider AuthenticationStateProvider



@foreach (var student in StudentService.Students)
{
    Console.WriteLine(IDU);

    @if (@IDU == student.ParentID)
    {
        <div class="container">
            <img />
            <div class="name">
                <h1>@student.FirstName</h1>
                <h1>@student.LastName</h1>
            </div>
            <div class="info">
                <h2>@student.Address</h2>
                @foreach (var parent in ParentService.Parents)
                {
                    if (student.ParentID == parent.ParentID)
                    {
                        <h2>Parent: @parent.FirstName</h2>
                    }
                }
            </div>
        </div>
    }
}


@code {
    [Parameter]
    public int? ID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    Student student = new Student();
    User user = new User();

    string btnText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Parent" : "Update Parent";
        await StudentService.GetStudents();
        await ParentService.GetParents();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {
            await StudentService.GetParents();
            await StudentService.GetClasses();
        }
        else
        {
            student = await StudentService.GetStudentById((int)ID);
            user = await UserService.GetUserByID(student.UserID);
        }
        await GetClaimsGetID();
        await base.OnParametersSetAsync();
    }
    async Task HandleSubmit()
    {
        if (ID == null)
        {
            user.UserRole = "Student";
            await UserService.CreateUser(user);
            await UserService.GetUsers();
            student.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await StudentService.CreateStudent(student);
        }
        else
        {
            user.UserRole = "Student";
            await StudentService.UpdateStudent(student);
            await UserService.UpdateUser(user);
        }
    }
    async Task DelateParent()
    {
        await UserService.DeleteUser(student.UserID);
        await StudentService.DeleteStudent(student.ParentID);
    }

    int IDU;
    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                IDU = Int32.Parse(claim.Value);
            }
        };
    }

    void ShowParent(int id)
    {
        NavigationMenager.NavigateTo($"parent/{id}");
    }
    void CreateParent()
    {
        NavigationMenager.NavigateTo("/parent");
    }
}
