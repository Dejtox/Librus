@page "/teacher"
@page "/teacher/{id:int}"
@inject ITeacherService TeacherService
@inject IUserService UserService

@if (ID == null)
{
    <PageTitle>Add new Teacher</PageTitle>
    <h3>Add new Teacher</h3>
}
else
{
    <PageTitle>Edit @teacher.FirstName @teacher.LastName</PageTitle>
    <h3>Edit @teacher.FirstName @teacher.LastName</h3>
}


<EditForm Model="teacher" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="teacher.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lasttname">Last Name</label>
        <InputText id="lastname" @bind-Value="teacher.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="teacher.Email" class="form-control"></InputText>
    </div>
    <div>
        <label for="phonenumber">Phone Number</label>
        <InputText id="phonenumber" @bind-Value="teacher.PhoneNumber" class="form-control"></InputText>
    </div>
    <div>
        <label for="login">Login</label>
        <InputText id="login" @bind-Value="user.Login" class="form-control"></InputText>
    </div>
    <div>
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.PasswordHash" class="form-control"></InputText>
    </div>
    <div>
        <select multiple>
            @foreach(var role in availableRoles)
            {
                <option value="@role" @onclick="(()=>roles.Add(role))">@role</option>
            })
        </select>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DelateTeacher">Delete Teacher</button>

</EditForm>


@code {
    [Parameter]
    public int? ID { get; set; }
    List<string> availableRoles=new List<string> { "Teacher", "Principle", "Librarian", "Secretary" };
    Teacher teacher = new Teacher();
    User user = new User();
    UserDto userDto=new UserDto();
    List<User> users = new List<User>();
    List<string> roles = new List<string>();

    string btnText = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        btnText = ID == null ? "Save New Teacher" : "Update Teacher";
        await TeacherService.GetTeachers();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {

        }
        else
        {
            teacher = await TeacherService.GetTeacherByID((int)ID);
            user = await UserService.GetUserByID(teacher.UserID);
        }
    }
    async Task HandleSubmit()
    {
        if (ID == null)
        {
            //user.UserRole = "Teacher";
            userDto.User = user;
            userDto.Roles = roles;
            foreach(var role in roles)
            {
                Console.WriteLine(role);
            }
            await UserService.CreateUser(userDto);
            await UserService.GetUsers();
            teacher.UserID = UserService.Users[UserService.Users.Count - 1].UserID;
            await TeacherService.CreateTeacher(teacher);
            
        }
        else
        {
            //user.UserRole = "Teacher";
            await TeacherService.UpdateTeacher(teacher);
            await UserService.UpdateUser(user);
        }
    }
    async Task DelateTeacher()
    {
        await UserService.DeleteUser(teacher.UserID);
        await TeacherService.DeleteTeacher(teacher.TeacherID);
    }

}
