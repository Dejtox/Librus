@page "/Teachergrafic"
@inject NavigationManager NavigationMenager
@inject ITeacherService TeacherService
@inject IEnrollmentService EnrollmentService
@inject ISubstituteService SubstituteService
@inject ISchoolTripService SchoolTripService
<h3>Teachergrafic</h3>
<div>
    <div>
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="SelectYear">
                @for (int i = 2022; i < 2024; i++)
                {
                    <option>@i</option>
                }
            </select>
        </div>
        <div class="col-sm-12 col-lg-2">
            <select name="" id="" class="fluent-input" @onchange="SelectMonth">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">Sepetemper</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>
        </div>


    </div>
</div>
<div>
    @if (SelectedDate.Day - 4 > 0)
    {
        <button type="button" class="btn-close" aria-label="Close" @onclick="Lower">h</button>
    }
    else
    {
        <button disabled></button>
    }
    
    @if(SelectedDate.Day - 3 >= 0)
    {<button>@(SelectedDate.Day - 3)</button>}
    @if (SelectedDate.Day - 2 >= 0)
    {<button>@(SelectedDate.Day - 2)</button>}
    @if (SelectedDate.Day -1 >= 0)
    {<button>@(SelectedDate.Day - 1)</button>}
    <button>@SelectedDate.Day </button>
    @if (SelectedDate.Day +1 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {<button>@SelectedDate.AddDays(1).Day </button>}
    @if (SelectedDate.Day + 2 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {<button>@SelectedDate.AddDays(2).Day </button>}
    @if (SelectedDate.Day + 3 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {<button>@SelectedDate.AddDays(3).Day </button>}
    @if(SelectedDate.Day + 4 <= DateTime.DaysInMonth(SelectedDate.Year, SelectedDate.Month))
    {
        <button type="button" class="btn-close" aria-label="Close" @onclick="Higher">l</button>
    }
    else
    {
        <button disabled></button>
    }
    <div>
        @foreach (var dalyevent in Events)
        {
            if (dalyevent.DT.Day == SelectedDate.Day)
            {
                <button type="button class="btn-close" aria-label="Lesson" @onclick="(()=>MoveTo(dalyevent.enr.EnrollmentID))">@dalyevent.description @dalyevent.DT.Hour </button>
            }
        }
    </div>
</div>
@code {
    int ID;
    int? Id = null;
    Teacher teacher = null;
    DateTime SelectedDate;
    string Roles;
    List<Event> Events = new List<Event>();
    List<Event> TempEvents = new List<Event>();

    private class Event
    {
        public DateTime DT { get; set; }
        public string description { get; set; }
        public Enrollment enr { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await TeacherService.GetTeachers();
        await GetClaimsGetID();
        SelectedDate = DateTime.Now;
        await NewDate();
    }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                Roles = claim.Value;
            }
        };

        if (Roles == "Teacher")
        {
            foreach (var teacherpom in TeacherService.Teachers)
            {
                if (teacherpom.TeacherID == ID)
                {
                    Id = teacherpom.TeacherID;
                    teacher = teacherpom;
                }
            }

        }
    }

    private void Lower()
    {
        SelectedDate = SelectedDate.AddDays(-1);
        StateHasChanged();
    }
    private void Higher()
    {
        SelectedDate = SelectedDate.AddDays(1);
        StateHasChanged();
    }
    async Task NewDate()
    {
        int i = 0;
        Events.Clear();
        TempEvents.Clear();
        await EnrollmentService.GetEnrollments();
        await SubstituteService.GetSubstitutes();
        foreach (var evn in EnrollmentService.Enrollments)
        {
            if(evn.Subject.TeacherID == Id)
            {
                if(evn.Date.Month == SelectedDate.Month & evn.Date.Year == SelectedDate.Year )
                {
                    TempEvents.Add(new Event { DT = evn.Date, description = evn.Subject.SubjectName ,enr = evn});
                }
            }
        }
        foreach (var evn in SubstituteService.Substitutes)
        {
            if (evn.StartDate.Month == SelectedDate.Month & evn.StartDate.Year == SelectedDate.Year)
            {                           
                if(evn.Subject.TeacherID == Id)
                {
                    TempEvents.Add(new Event { DT = evn.StartDate, description = evn.Subject.SubjectName + " Substitute" });
                }
            }
        }
        foreach (var evn in TempEvents)
        {
            if (Events.Count != 0)
            {
                foreach (var evnt in Events)
                {
                    if (DateTime.Compare(evn.DT , evnt.DT) < 0)
                    {
                        Events.Insert(i, evn);
                        i = 0;
                        break;
                    }
                    else
                    {
                        i++;
                        if (Events.Count <= i)
                        {
                            Events.Add(evn);
                            i = 0;
                            break;
                        }
                    }
                }
            }
            else
            {
                Events.Add(evn);
            }
        }
        StateHasChanged();
    }
    async Task SelectYear(ChangeEventArgs e)
    {
        int i = Convert.ToInt32(e.Value.ToString());
        SelectedDate.Year.Equals(i);
        Console.WriteLine(i);
        await NewDate();
    }
    async Task SelectMonth(ChangeEventArgs e)
    {
        int month = Convert.ToInt32(e.Value.ToString());
        SelectedDate = new DateTime(SelectedDate.Year, month, 4);
        Console.WriteLine(SelectedDate.Month);
        await NewDate();

    }
    async Task MoveTo(int id)
    {
        NavigationMenager.NavigateTo($"TeachersLessonMenu/{id}");
    }



}


