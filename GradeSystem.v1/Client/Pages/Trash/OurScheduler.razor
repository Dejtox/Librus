@page "/scheduler"
@inject IEnrollmentService EnrollmentService
@inject IStudentService StudentService
@inject NavigationManager NavigationMenager
@inject AuthenticationStateProvider authenticationStateProvider


<SfSchedule TValue="DataItem">
    <ScheduleEventSettings DataSource="@data"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

@code {
    int ID;
    Student student;
    int hourStart = 7;

    protected override async Task OnInitializedAsync()
    {
        await EnrollmentService.GetEnrollments();
        await GetClaimsGetID();
        student = await StudentService.GetStudentById(ID);
        await Fill();
    }
    List<DataItem> data = new List<DataItem>();

    class DataItem 
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    } 

    async Task Fill()
    {
        int pom = 1;
        foreach (var enrolment in EnrollmentService.Enrollments)
        {
            if (enrolment.ClassID == student.ClassID)
            {
                data.Add(new DataItem { Id = pom, StartTime = enrolment.Date, EndTime = enrolment.Date.AddMinutes(45), Subject = enrolment.Subject.Teacher.LastName +" "+ enrolment.Subject.Teacher.FirstName +" "+ enrolment.Subject.SubjectName });
                pom++;
            }
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    void ShowEnrollment(int id)
    {
        NavigationMenager.NavigateTo($"/enrollment/{id}");
    }

    void CreateEnrollment()
    {
        NavigationMenager.NavigateTo("/enrollment");
    }

    private async Task GetClaimsGetID()
    {
        var user = (await authenticationState).User;
        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")
            {
                ID = Int32.Parse(claim.Value);
            }
        };
    }
}