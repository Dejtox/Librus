@page "/plan"
@using GradeSystem.v1.Client.Pages
@inject ILessonsHoursService LessonsHoursService

@if (LessonsHoursService.LessonsHours.Count!= 0)
{
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-9">
            <DayPlan>
                <LessonBlock Context="block">
                    <div class="day shadow-effect @GenerateColor(block.Name)">
                        <h3 class="ms-fontSize-19 ms-fontWeight-regular ">@block.Name</h3>
                        @if (block.Lesson != null)
                        {
                            var firstEvent = block.Lesson;
                            <div class=" plan-event @GenerateColor(block.Name) ">
                                @if (firstEvent.Subject.SubjectName.Length > 25)
                                {
                                    @firstEvent.Subject.SubjectName.Substring(0, 25)

                                    <text>...</text>
                                }
                                else
                                {   @firstEvent.Subject.Teacher.FirstName
                                    <text>&nbsp</text>
                                    @firstEvent.Subject.Teacher.LastName
                                    <br/>
                                    @firstEvent.ClassRoom
                                }
                            </div>
                        }
                    </div>

                </LessonBlock>
            </DayPlan>
        </div>
        <!-- Day Menu -->
        <div class="col-sm-12 col-md-12 col-lg-3">
            <div class="add-new-plan">
            <EnrollmentAddEdit></EnrollmentAddEdit>
            </div>
        </div>
    </div>
}
else 
{
    <div>
        <input type="number" name="liczbaInputow" @bind-value=liczbaInputow />
    </div>
    @if (liczbaInputow != null)
    {
        for(int z=0;z<liczbaInputow;z++)
        {
            plans.Add(new LessonsHours());
        }
        <EditForm Model="plans" OnSubmit="HandleSubmit">

            @for(int i=0;i<liczbaInputow;i++)
            {
                <div>
                    <label for="Enrollment-time">Start</label>
                    <input type="datetime-local" id="meeting-time"
               name="enrollment-time" @bind-value="plans[i].Start">

                </div>
                <div>
                    <label for="Enrollment-time">End</label>
                    <input type="datetime-local" id="meeting-time"
               name="enrollment-time" @bind-value="plans[i].End">

                </div>

                
            }
            <br />
                <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    }  
}



@code {
    int? liczbaInputow=null;
    IList<LessonsHours> plans= new List<LessonsHours>();
    protected override async Task OnInitializedAsync()
    {
        await LessonsHoursService.GetLessonsHours();
    }
    private CalendarDay selectedDay = new CalendarDay
        {
            Date = DateTime.Now
        };

    protected override void OnInitialized()
    {
        AddEvent.OnEventAdded += () =>
        {
            StateHasChanged();
        };
    }
    async Task HandleSubmit()
    {
        foreach(var plan in plans)
        {
           await LessonsHoursService.CreateLessonsHours(plan);
        }

    }

     public string GenerateColor(string lessonname) 
    {
        return lessonname== "Matematyka"? "magenta" : lessonname== "polski" ? "classB" : "";
    }

}
